// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Vault must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get prizeClaims(): Array<string> {
    let value = this.get("prizeClaims");
    return value!.toStringArray();
  }

  set prizeClaims(value: Array<string>) {
    this.set("prizeClaims", Value.fromStringArray(value));
  }
}

export class Account extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Account must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Account | null {
    return changetype<Account | null>(store.get("Account", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get prizesWon(): Array<string> {
    let value = this.get("prizesWon");
    return value!.toStringArray();
  }

  set prizesWon(value: Array<string>) {
    this.set("prizesWon", Value.fromStringArray(value));
  }

  get prizesReceived(): Array<string> {
    let value = this.get("prizesReceived");
    return value!.toStringArray();
  }

  set prizesReceived(value: Array<string>) {
    this.set("prizesReceived", Value.fromStringArray(value));
  }

  get fees(): Array<string> {
    let value = this.get("fees");
    return value!.toStringArray();
  }

  set fees(value: Array<string>) {
    this.set("fees", Value.fromStringArray(value));
  }
}

export class Draw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Draw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Draw must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Draw", id.toString(), this);
    }
  }

  static load(id: string): Draw | null {
    return changetype<Draw | null>(store.get("Draw", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizeClaims(): Array<string> {
    let value = this.get("prizeClaims");
    return value!.toStringArray();
  }

  set prizeClaims(value: Array<string>) {
    this.set("prizeClaims", Value.fromStringArray(value));
  }
}

export class PrizeClaim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrizeClaim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PrizeClaim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PrizeClaim", id.toString(), this);
    }
  }

  static load(id: string): PrizeClaim | null {
    return changetype<PrizeClaim | null>(store.get("PrizeClaim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get draw(): string {
    let value = this.get("draw");
    return value!.toString();
  }

  set draw(value: string) {
    this.set("draw", Value.fromString(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    return value!.toBytes();
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get tier(): i32 {
    let value = this.get("tier");
    return value!.toI32();
  }

  set tier(value: i32) {
    this.set("tier", Value.fromI32(value));
  }

  get prizeIndex(): BigInt {
    let value = this.get("prizeIndex");
    return value!.toBigInt();
  }

  set prizeIndex(value: BigInt) {
    this.set("prizeIndex", Value.fromBigInt(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    return value!.toBigInt();
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get feeRecipient(): Bytes {
    let value = this.get("feeRecipient");
    return value!.toBytes();
  }

  set feeRecipient(value: Bytes) {
    this.set("feeRecipient", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
