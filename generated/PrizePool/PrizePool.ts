// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimedPrize extends ethereum.Event {
  get params(): ClaimedPrize__Params {
    return new ClaimedPrize__Params(this);
  }
}

export class ClaimedPrize__Params {
  _event: ClaimedPrize;

  constructor(event: ClaimedPrize) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get winner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tier(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get payout(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class ManagerTransferred extends ethereum.Event {
  get params(): ManagerTransferred__Params {
    return new ManagerTransferred__Params(this);
  }
}

export class ManagerTransferred__Params {
  _event: ManagerTransferred;

  constructor(event: ManagerTransferred) {
    this._event = event;
  }

  get previousManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipOffered extends ethereum.Event {
  get params(): OwnershipOffered__Params {
    return new OwnershipOffered__Params(this);
  }
}

export class OwnershipOffered__Params {
  _event: OwnershipOffered;

  constructor(event: OwnershipOffered) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PrizePool__calculateTierTwabTimestampsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStartTimestamp(): BigInt {
    return this.value0;
  }

  getEndTimestamp(): BigInt {
    return this.value1;
  }
}

export class PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class PrizePool extends ethereum.SmartContract {
  static bind(address: Address): PrizePool {
    return new PrizePool("PrizePool", address);
  }

  balanceOfClaimRewards(_claimer: Address): BigInt {
    let result = super.call(
      "balanceOfClaimRewards",
      "balanceOfClaimRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_claimer)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfClaimRewards(_claimer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfClaimRewards",
      "balanceOfClaimRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_claimer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePrizeSize(_tier: i32): BigInt {
    let result = super.call(
      "calculatePrizeSize",
      "calculatePrizeSize(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toBigInt();
  }

  try_calculatePrizeSize(_tier: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePrizeSize",
      "calculatePrizeSize(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateTierTwabTimestamps(
    _tier: i32
  ): PrizePool__calculateTierTwabTimestampsResult {
    let result = super.call(
      "calculateTierTwabTimestamps",
      "calculateTierTwabTimestamps(uint8):(uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return new PrizePool__calculateTierTwabTimestampsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateTierTwabTimestamps(
    _tier: i32
  ): ethereum.CallResult<PrizePool__calculateTierTwabTimestampsResult> {
    let result = super.tryCall(
      "calculateTierTwabTimestamps",
      "calculateTierTwabTimestamps(uint8):(uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrizePool__calculateTierTwabTimestampsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  canaryClaimCount(): BigInt {
    let result = super.call(
      "canaryClaimCount",
      "canaryClaimCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_canaryClaimCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryClaimCount",
      "canaryClaimCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryPrizeCount(_numTiers: i32): BigInt {
    let result = super.call(
      "canaryPrizeCount",
      "canaryPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numTiers))]
    );

    return result[0].toBigInt();
  }

  try_canaryPrizeCount(_numTiers: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryPrizeCount",
      "canaryPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numTiers))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryPrizeCount1(): BigInt {
    let result = super.call(
      "canaryPrizeCount",
      "canaryPrizeCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_canaryPrizeCount1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryPrizeCount",
      "canaryPrizeCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryPrizeCountFractional(numTiers: i32): BigInt {
    let result = super.call(
      "canaryPrizeCountFractional",
      "canaryPrizeCountFractional(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );

    return result[0].toBigInt();
  }

  try_canaryPrizeCountFractional(numTiers: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryPrizeCountFractional",
      "canaryPrizeCountFractional(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryShares(): BigInt {
    let result = super.call("canaryShares", "canaryShares():(uint96)", []);

    return result[0].toBigInt();
  }

  try_canaryShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("canaryShares", "canaryShares():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimCount(): BigInt {
    let result = super.call("claimCount", "claimCount():(uint32)", []);

    return result[0].toBigInt();
  }

  try_claimCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimCount", "claimCount():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimExpansionThreshold(): BigInt {
    let result = super.call(
      "claimExpansionThreshold",
      "claimExpansionThreshold():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_claimExpansionThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimExpansionThreshold",
      "claimExpansionThreshold():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimPrize(
    _winner: Address,
    _tier: i32,
    _to: Address,
    _fee: BigInt,
    _feeRecipient: Address
  ): BigInt {
    let result = super.call(
      "claimPrize",
      "claimPrize(address,uint8,address,uint96,address):(uint256)",
      [
        ethereum.Value.fromAddress(_winner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromAddress(_feeRecipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimPrize(
    _winner: Address,
    _tier: i32,
    _to: Address,
    _fee: BigInt,
    _feeRecipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimPrize",
      "claimPrize(address,uint8,address,uint96,address):(uint256)",
      [
        ethereum.Value.fromAddress(_winner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromAddress(_feeRecipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  completeAndStartNextDraw(winningRandomNumber_: BigInt): BigInt {
    let result = super.call(
      "completeAndStartNextDraw",
      "completeAndStartNextDraw(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(winningRandomNumber_)]
    );

    return result[0].toBigInt();
  }

  try_completeAndStartNextDraw(
    winningRandomNumber_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "completeAndStartNextDraw",
      "completeAndStartNextDraw(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(winningRandomNumber_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributePrizeTokens(_prizeVault: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "contributePrizeTokens",
      "contributePrizeTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_prizeVault),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_contributePrizeTokens(
    _prizeVault: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributePrizeTokens",
      "contributePrizeTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_prizeVault),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drawPeriodSeconds(): BigInt {
    let result = super.call(
      "drawPeriodSeconds",
      "drawPeriodSeconds():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_drawPeriodSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "drawPeriodSeconds",
      "drawPeriodSeconds():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatedPrizeCount(numTiers: i32): BigInt {
    let result = super.call(
      "estimatedPrizeCount",
      "estimatedPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );

    return result[0].toBigInt();
  }

  try_estimatedPrizeCount(numTiers: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedPrizeCount",
      "estimatedPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatedPrizeCount1(): BigInt {
    let result = super.call(
      "estimatedPrizeCount",
      "estimatedPrizeCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimatedPrizeCount1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedPrizeCount",
      "estimatedPrizeCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContributedBetween(
    _vault: Address,
    _startDrawIdInclusive: BigInt,
    _endDrawIdInclusive: BigInt
  ): BigInt {
    let result = super.call(
      "getContributedBetween",
      "getContributedBetween(address,uint32,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(_startDrawIdInclusive),
        ethereum.Value.fromUnsignedBigInt(_endDrawIdInclusive)
      ]
    );

    return result[0].toBigInt();
  }

  try_getContributedBetween(
    _vault: Address,
    _startDrawIdInclusive: BigInt,
    _endDrawIdInclusive: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContributedBetween",
      "getContributedBetween(address,uint32,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(_startDrawIdInclusive),
        ethereum.Value.fromUnsignedBigInt(_endDrawIdInclusive)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastCompletedDrawId(): BigInt {
    let result = super.call(
      "getLastCompletedDrawId",
      "getLastCompletedDrawId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastCompletedDrawId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastCompletedDrawId",
      "getLastCompletedDrawId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextDrawId(): BigInt {
    let result = super.call("getNextDrawId", "getNextDrawId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNextDrawId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextDrawId",
      "getNextDrawId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierAccrualDurationInDraws(_tier: i32): BigInt {
    let result = super.call(
      "getTierAccrualDurationInDraws",
      "getTierAccrualDurationInDraws(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toBigInt();
  }

  try_getTierAccrualDurationInDraws(_tier: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierAccrualDurationInDraws",
      "getTierAccrualDurationInDraws(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierLiquidity(_tier: i32): BigInt {
    let result = super.call(
      "getTierLiquidity",
      "getTierLiquidity(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toBigInt();
  }

  try_getTierLiquidity(_tier: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierLiquidity",
      "getTierLiquidity(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierPrizeCount(_tier: i32): BigInt {
    let result = super.call(
      "getTierPrizeCount",
      "getTierPrizeCount(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toBigInt();
  }

  try_getTierPrizeCount(_tier: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierPrizeCount",
      "getTierPrizeCount(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalContributedBetween(
    _startDrawIdInclusive: BigInt,
    _endDrawIdInclusive: BigInt
  ): BigInt {
    let result = super.call(
      "getTotalContributedBetween",
      "getTotalContributedBetween(uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_startDrawIdInclusive),
        ethereum.Value.fromUnsignedBigInt(_endDrawIdInclusive)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalContributedBetween(
    _startDrawIdInclusive: BigInt,
    _endDrawIdInclusive: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalContributedBetween",
      "getTotalContributedBetween(uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_startDrawIdInclusive),
        ethereum.Value.fromUnsignedBigInt(_endDrawIdInclusive)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalShares(): BigInt {
    let result = super.call("getTotalShares", "getTotalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalShares",
      "getTotalShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultPortion(
    _vault: Address,
    startDrawId: BigInt,
    endDrawId: BigInt
  ): BigInt {
    let result = super.call(
      "getVaultPortion",
      "getVaultPortion(address,uint32,uint32):(int256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(startDrawId),
        ethereum.Value.fromUnsignedBigInt(endDrawId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVaultPortion(
    _vault: Address,
    startDrawId: BigInt,
    endDrawId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultPortion",
      "getVaultPortion(address,uint32,uint32):(int256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(startDrawId),
        ethereum.Value.fromUnsignedBigInt(endDrawId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultUserBalanceAndTotalSupplyTwab(
    _vault: Address,
    _user: Address,
    _drawDuration: BigInt
  ): PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult {
    let result = super.call(
      "getVaultUserBalanceAndTotalSupplyTwab",
      "getVaultUserBalanceAndTotalSupplyTwab(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_drawDuration)
      ]
    );

    return new PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getVaultUserBalanceAndTotalSupplyTwab(
    _vault: Address,
    _user: Address,
    _drawDuration: BigInt
  ): ethereum.CallResult<
    PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult
  > {
    let result = super.tryCall(
      "getVaultUserBalanceAndTotalSupplyTwab",
      "getVaultUserBalanceAndTotalSupplyTwab(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_drawDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getWinningRandomNumber(): BigInt {
    let result = super.call(
      "getWinningRandomNumber",
      "getWinningRandomNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getWinningRandomNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWinningRandomNumber",
      "getWinningRandomNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  grandPrizePeriodDraws(): BigInt {
    let result = super.call(
      "grandPrizePeriodDraws",
      "grandPrizePeriodDraws():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_grandPrizePeriodDraws(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "grandPrizePeriodDraws",
      "grandPrizePeriodDraws():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasNextDrawFinished(): boolean {
    let result = super.call(
      "hasNextDrawFinished",
      "hasNextDrawFinished():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasNextDrawFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasNextDrawFinished",
      "hasNextDrawFinished():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWinner(_vault: Address, _user: Address, _tier: i32): boolean {
    let result = super.call(
      "isWinner",
      "isWinner(address,address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))
      ]
    );

    return result[0].toBoolean();
  }

  try_isWinner(
    _vault: Address,
    _user: Address,
    _tier: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWinner",
      "isWinner(address,address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  largestTierClaimed(): i32 {
    let result = super.call(
      "largestTierClaimed",
      "largestTierClaimed():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_largestTierClaimed(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "largestTierClaimed",
      "largestTierClaimed():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  lastCompletedDrawStartedAt(): BigInt {
    let result = super.call(
      "lastCompletedDrawStartedAt",
      "lastCompletedDrawStartedAt():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCompletedDrawStartedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCompletedDrawStartedAt",
      "lastCompletedDrawStartedAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  nextDrawEndsAt(): BigInt {
    let result = super.call("nextDrawEndsAt", "nextDrawEndsAt():(uint64)", []);

    return result[0].toBigInt();
  }

  try_nextDrawEndsAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextDrawEndsAt",
      "nextDrawEndsAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDrawStartsAt(): BigInt {
    let result = super.call(
      "nextDrawStartsAt",
      "nextDrawStartsAt():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextDrawStartsAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextDrawStartsAt",
      "nextDrawStartsAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfTiers(): i32 {
    let result = super.call("numberOfTiers", "numberOfTiers():(uint8)", []);

    return result[0].toI32();
  }

  try_numberOfTiers(): ethereum.CallResult<i32> {
    let result = super.tryCall("numberOfTiers", "numberOfTiers():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizeToken(): Address {
    let result = super.call("prizeToken", "prizeToken():(address)", []);

    return result[0].toAddress();
  }

  try_prizeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("prizeToken", "prizeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizeTokenPerShare(): BigInt {
    let result = super.call(
      "prizeTokenPerShare",
      "prizeTokenPerShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizeTokenPerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizeTokenPerShare",
      "prizeTokenPerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserve(): BigInt {
    let result = super.call("reserve", "reserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserve", "reserve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveShares(): BigInt {
    let result = super.call("reserveShares", "reserveShares():(uint96)", []);

    return result[0].toBigInt();
  }

  try_reserveShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserveShares", "reserveShares():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setManager(_newManager: Address): boolean {
    let result = super.call("setManager", "setManager(address):(bool)", [
      ethereum.Value.fromAddress(_newManager)
    ]);

    return result[0].toBoolean();
  }

  try_setManager(_newManager: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("setManager", "setManager(address):(bool)", [
      ethereum.Value.fromAddress(_newManager)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  smoothing(): BigInt {
    let result = super.call("smoothing", "smoothing():(int64)", []);

    return result[0].toBigInt();
  }

  try_smoothing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("smoothing", "smoothing():(int64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tierShares(): BigInt {
    let result = super.call("tierShares", "tierShares():(uint96)", []);

    return result[0].toBigInt();
  }

  try_tierShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tierShares", "tierShares():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDrawLiquidity(): BigInt {
    let result = super.call(
      "totalDrawLiquidity",
      "totalDrawLiquidity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDrawLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDrawLiquidity",
      "totalDrawLiquidity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  twabController(): Address {
    let result = super.call("twabController", "twabController():(address)", []);

    return result[0].toAddress();
  }

  try_twabController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "twabController",
      "twabController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _prizeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _twabController(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _grandPrizePeriodDraws(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _drawPeriodSeconds(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get nextDrawStartsAt_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _numberOfTiers(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _tierShares(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _canaryShares(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _reserveShares(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _claimExpansionThreshold(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _smoothing(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimPrizeCall extends ethereum.Call {
  get inputs(): ClaimPrizeCall__Inputs {
    return new ClaimPrizeCall__Inputs(this);
  }

  get outputs(): ClaimPrizeCall__Outputs {
    return new ClaimPrizeCall__Outputs(this);
  }
}

export class ClaimPrizeCall__Inputs {
  _call: ClaimPrizeCall;

  constructor(call: ClaimPrizeCall) {
    this._call = call;
  }

  get _winner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tier(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ClaimPrizeCall__Outputs {
  _call: ClaimPrizeCall;

  constructor(call: ClaimPrizeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CompleteAndStartNextDrawCall extends ethereum.Call {
  get inputs(): CompleteAndStartNextDrawCall__Inputs {
    return new CompleteAndStartNextDrawCall__Inputs(this);
  }

  get outputs(): CompleteAndStartNextDrawCall__Outputs {
    return new CompleteAndStartNextDrawCall__Outputs(this);
  }
}

export class CompleteAndStartNextDrawCall__Inputs {
  _call: CompleteAndStartNextDrawCall;

  constructor(call: CompleteAndStartNextDrawCall) {
    this._call = call;
  }

  get winningRandomNumber_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CompleteAndStartNextDrawCall__Outputs {
  _call: CompleteAndStartNextDrawCall;

  constructor(call: CompleteAndStartNextDrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ContributePrizeTokensCall extends ethereum.Call {
  get inputs(): ContributePrizeTokensCall__Inputs {
    return new ContributePrizeTokensCall__Inputs(this);
  }

  get outputs(): ContributePrizeTokensCall__Outputs {
    return new ContributePrizeTokensCall__Outputs(this);
  }
}

export class ContributePrizeTokensCall__Inputs {
  _call: ContributePrizeTokensCall;

  constructor(call: ContributePrizeTokensCall) {
    this._call = call;
  }

  get _prizeVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ContributePrizeTokensCall__Outputs {
  _call: ContributePrizeTokensCall;

  constructor(call: ContributePrizeTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get _newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawClaimRewardsCall extends ethereum.Call {
  get inputs(): WithdrawClaimRewardsCall__Inputs {
    return new WithdrawClaimRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawClaimRewardsCall__Outputs {
    return new WithdrawClaimRewardsCall__Outputs(this);
  }
}

export class WithdrawClaimRewardsCall__Inputs {
  _call: WithdrawClaimRewardsCall;

  constructor(call: WithdrawClaimRewardsCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawClaimRewardsCall__Outputs {
  _call: WithdrawClaimRewardsCall;

  constructor(call: WithdrawClaimRewardsCall) {
    this._call = call;
  }
}

export class WithdrawReserveCall extends ethereum.Call {
  get inputs(): WithdrawReserveCall__Inputs {
    return new WithdrawReserveCall__Inputs(this);
  }

  get outputs(): WithdrawReserveCall__Outputs {
    return new WithdrawReserveCall__Outputs(this);
  }
}

export class WithdrawReserveCall__Inputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawReserveCall__Outputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }
}
