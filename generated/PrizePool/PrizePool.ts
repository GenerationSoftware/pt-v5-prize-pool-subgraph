// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimedPrize extends ethereum.Event {
  get params(): ClaimedPrize__Params {
    return new ClaimedPrize__Params(this);
  }
}

export class ClaimedPrize__Params {
  _event: ClaimedPrize;

  constructor(event: ClaimedPrize) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get drawId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tier(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get prizeIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get payout(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class ContributePrizeTokens extends ethereum.Event {
  get params(): ContributePrizeTokens__Params {
    return new ContributePrizeTokens__Params(this);
  }
}

export class ContributePrizeTokens__Params {
  _event: ContributePrizeTokens;

  constructor(event: ContributePrizeTokens) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get drawId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DrawClosed extends ethereum.Event {
  get params(): DrawClosed__Params {
    return new DrawClosed__Params(this);
  }
}

export class DrawClosed__Params {
  _event: DrawClosed;

  constructor(event: DrawClosed) {
    this._event = event;
  }

  get drawId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get winningRandomNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get numTiers(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get nextNumTiers(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get reserve(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get prizeTokensPerShare(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get drawStartedAt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class DrawManagerSet extends ethereum.Event {
  get params(): DrawManagerSet__Params {
    return new DrawManagerSet__Params(this);
  }
}

export class DrawManagerSet__Params {
  _event: DrawManagerSet;

  constructor(event: DrawManagerSet) {
    this._event = event;
  }

  get drawManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IncreaseClaimRewards extends ethereum.Event {
  get params(): IncreaseClaimRewards__Params {
    return new IncreaseClaimRewards__Params(this);
  }
}

export class IncreaseClaimRewards__Params {
  _event: IncreaseClaimRewards;

  constructor(event: IncreaseClaimRewards) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IncreaseReserve extends ethereum.Event {
  get params(): IncreaseReserve__Params {
    return new IncreaseReserve__Params(this);
  }
}

export class IncreaseReserve__Params {
  _event: IncreaseReserve;

  constructor(event: IncreaseReserve) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReserveConsumed extends ethereum.Event {
  get params(): ReserveConsumed__Params {
    return new ReserveConsumed__Params(this);
  }
}

export class ReserveConsumed__Params {
  _event: ReserveConsumed;

  constructor(event: ReserveConsumed) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawClaimRewards extends ethereum.Event {
  get params(): WithdrawClaimRewards__Params {
    return new WithdrawClaimRewards__Params(this);
  }
}

export class WithdrawClaimRewards__Params {
  _event: WithdrawClaimRewards;

  constructor(event: WithdrawClaimRewards) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get available(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawReserve extends ethereum.Event {
  get params(): WithdrawReserve__Params {
    return new WithdrawReserve__Params(this);
  }
}

export class WithdrawReserve__Params {
  _event: WithdrawReserve;

  constructor(event: WithdrawReserve) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrizePool__calculateTierTwabTimestampsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStartTimestamp(): BigInt {
    return this.value0;
  }

  getEndTimestamp(): BigInt {
    return this.value1;
  }
}

export class PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class PrizePool extends ethereum.SmartContract {
  static bind(address: Address): PrizePool {
    return new PrizePool("PrizePool", address);
  }

  accountedBalance(): BigInt {
    let result = super.call(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accountedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfClaimRewards(_claimer: Address): BigInt {
    let result = super.call(
      "balanceOfClaimRewards",
      "balanceOfClaimRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_claimer)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfClaimRewards(_claimer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfClaimRewards",
      "balanceOfClaimRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_claimer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateTierTwabTimestamps(
    _tier: i32
  ): PrizePool__calculateTierTwabTimestampsResult {
    let result = super.call(
      "calculateTierTwabTimestamps",
      "calculateTierTwabTimestamps(uint8):(uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return new PrizePool__calculateTierTwabTimestampsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calculateTierTwabTimestamps(
    _tier: i32
  ): ethereum.CallResult<PrizePool__calculateTierTwabTimestampsResult> {
    let result = super.tryCall(
      "calculateTierTwabTimestamps",
      "calculateTierTwabTimestamps(uint8):(uint64,uint64)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrizePool__calculateTierTwabTimestampsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  canaryClaimCount(): BigInt {
    let result = super.call(
      "canaryClaimCount",
      "canaryClaimCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_canaryClaimCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryClaimCount",
      "canaryClaimCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryPrizeCount(_numTiers: i32): BigInt {
    let result = super.call(
      "canaryPrizeCount",
      "canaryPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numTiers))]
    );

    return result[0].toBigInt();
  }

  try_canaryPrizeCount(_numTiers: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryPrizeCount",
      "canaryPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numTiers))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryPrizeCount1(): BigInt {
    let result = super.call(
      "canaryPrizeCount",
      "canaryPrizeCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_canaryPrizeCount1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryPrizeCount",
      "canaryPrizeCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryPrizeCountFractional(numTiers: i32): BigInt {
    let result = super.call(
      "canaryPrizeCountFractional",
      "canaryPrizeCountFractional(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );

    return result[0].toBigInt();
  }

  try_canaryPrizeCountFractional(numTiers: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canaryPrizeCountFractional",
      "canaryPrizeCountFractional(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canaryShares(): i32 {
    let result = super.call("canaryShares", "canaryShares():(uint8)", []);

    return result[0].toI32();
  }

  try_canaryShares(): ethereum.CallResult<i32> {
    let result = super.tryCall("canaryShares", "canaryShares():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  claimCount(): BigInt {
    let result = super.call("claimCount", "claimCount():(uint32)", []);

    return result[0].toBigInt();
  }

  try_claimCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimCount", "claimCount():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimExpansionThreshold(): BigInt {
    let result = super.call(
      "claimExpansionThreshold",
      "claimExpansionThreshold():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_claimExpansionThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimExpansionThreshold",
      "claimExpansionThreshold():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimPrize(
    _winner: Address,
    _tier: i32,
    _prizeIndex: BigInt,
    _prizeRecipient: Address,
    _fee: BigInt,
    _feeRecipient: Address
  ): BigInt {
    let result = super.call(
      "claimPrize",
      "claimPrize(address,uint8,uint32,address,uint96,address):(uint256)",
      [
        ethereum.Value.fromAddress(_winner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(_prizeIndex),
        ethereum.Value.fromAddress(_prizeRecipient),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromAddress(_feeRecipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimPrize(
    _winner: Address,
    _tier: i32,
    _prizeIndex: BigInt,
    _prizeRecipient: Address,
    _fee: BigInt,
    _feeRecipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimPrize",
      "claimPrize(address,uint8,uint32,address,uint96,address):(uint256)",
      [
        ethereum.Value.fromAddress(_winner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(_prizeIndex),
        ethereum.Value.fromAddress(_prizeRecipient),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromAddress(_feeRecipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  closeDraw(winningRandomNumber_: BigInt): i32 {
    let result = super.call("closeDraw", "closeDraw(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(winningRandomNumber_)
    ]);

    return result[0].toI32();
  }

  try_closeDraw(winningRandomNumber_: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("closeDraw", "closeDraw(uint256):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(winningRandomNumber_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  contributePrizeTokens(_prizeVault: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "contributePrizeTokens",
      "contributePrizeTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_prizeVault),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_contributePrizeTokens(
    _prizeVault: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributePrizeTokens",
      "contributePrizeTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_prizeVault),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drawManager(): Address {
    let result = super.call("drawManager", "drawManager():(address)", []);

    return result[0].toAddress();
  }

  try_drawManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("drawManager", "drawManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  drawPeriodSeconds(): BigInt {
    let result = super.call(
      "drawPeriodSeconds",
      "drawPeriodSeconds():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_drawPeriodSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "drawPeriodSeconds",
      "drawPeriodSeconds():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatedPrizeCount(numTiers: i32): BigInt {
    let result = super.call(
      "estimatedPrizeCount",
      "estimatedPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );

    return result[0].toBigInt();
  }

  try_estimatedPrizeCount(numTiers: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedPrizeCount",
      "estimatedPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numTiers))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatedPrizeCount1(): BigInt {
    let result = super.call(
      "estimatedPrizeCount",
      "estimatedPrizeCount():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimatedPrizeCount1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedPrizeCount",
      "estimatedPrizeCount():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstDrawStartsAt(): BigInt {
    let result = super.call(
      "firstDrawStartsAt",
      "firstDrawStartsAt():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstDrawStartsAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstDrawStartsAt",
      "firstDrawStartsAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContributedBetween(
    _vault: Address,
    _startDrawIdInclusive: i32,
    _endDrawIdInclusive: i32
  ): BigInt {
    let result = super.call(
      "getContributedBetween",
      "getContributedBetween(address,uint16,uint16):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(_startDrawIdInclusive)
        ),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_endDrawIdInclusive))
      ]
    );

    return result[0].toBigInt();
  }

  try_getContributedBetween(
    _vault: Address,
    _startDrawIdInclusive: i32,
    _endDrawIdInclusive: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContributedBetween",
      "getContributedBetween(address,uint16,uint16):(uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(_startDrawIdInclusive)
        ),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_endDrawIdInclusive))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastClosedDrawId(): BigInt {
    let result = super.call(
      "getLastClosedDrawId",
      "getLastClosedDrawId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastClosedDrawId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastClosedDrawId",
      "getLastClosedDrawId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOpenDrawId(): i32 {
    let result = super.call("getOpenDrawId", "getOpenDrawId():(uint16)", []);

    return result[0].toI32();
  }

  try_getOpenDrawId(): ethereum.CallResult<i32> {
    let result = super.tryCall("getOpenDrawId", "getOpenDrawId():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTierAccrualDurationInDraws(_tier: i32): i32 {
    let result = super.call(
      "getTierAccrualDurationInDraws",
      "getTierAccrualDurationInDraws(uint8):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toI32();
  }

  try_getTierAccrualDurationInDraws(_tier: i32): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getTierAccrualDurationInDraws",
      "getTierAccrualDurationInDraws(uint8):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTierOdds(_tier: i32, _numTiers: i32): BigInt {
    let result = super.call(
      "getTierOdds",
      "getTierOdds(uint8,uint8):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numTiers))
      ]
    );

    return result[0].toBigInt();
  }

  try_getTierOdds(_tier: i32, _numTiers: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierOdds",
      "getTierOdds(uint8,uint8):(int256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numTiers))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierPrizeCount(_tier: i32, _numberOfTiers: i32): BigInt {
    let result = super.call(
      "getTierPrizeCount",
      "getTierPrizeCount(uint8,uint8):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numberOfTiers))
      ]
    );

    return result[0].toBigInt();
  }

  try_getTierPrizeCount(
    _tier: i32,
    _numberOfTiers: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierPrizeCount",
      "getTierPrizeCount(uint8,uint8):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numberOfTiers))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierPrizeCount1(_tier: i32): BigInt {
    let result = super.call(
      "getTierPrizeCount",
      "getTierPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toBigInt();
  }

  try_getTierPrizeCount1(_tier: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierPrizeCount",
      "getTierPrizeCount(uint8):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierPrizeSize(_tier: i32): BigInt {
    let result = super.call(
      "getTierPrizeSize",
      "getTierPrizeSize(uint8):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toBigInt();
  }

  try_getTierPrizeSize(_tier: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierPrizeSize",
      "getTierPrizeSize(uint8):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierRemainingLiquidity(_tier: i32): BigInt {
    let result = super.call(
      "getTierRemainingLiquidity",
      "getTierRemainingLiquidity(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );

    return result[0].toBigInt();
  }

  try_getTierRemainingLiquidity(_tier: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierRemainingLiquidity",
      "getTierRemainingLiquidity(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalContributedBetween(
    _startDrawIdInclusive: i32,
    _endDrawIdInclusive: i32
  ): BigInt {
    let result = super.call(
      "getTotalContributedBetween",
      "getTotalContributedBetween(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(_startDrawIdInclusive)
        ),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_endDrawIdInclusive))
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalContributedBetween(
    _startDrawIdInclusive: i32,
    _endDrawIdInclusive: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalContributedBetween",
      "getTotalContributedBetween(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(
          BigInt.fromI32(_startDrawIdInclusive)
        ),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_endDrawIdInclusive))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalContributionsForClosedDraw(): BigInt {
    let result = super.call(
      "getTotalContributionsForClosedDraw",
      "getTotalContributionsForClosedDraw():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalContributionsForClosedDraw(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalContributionsForClosedDraw",
      "getTotalContributionsForClosedDraw():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalShares(): BigInt {
    let result = super.call("getTotalShares", "getTotalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalShares",
      "getTotalShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultPortion(_vault: Address, _startDrawId: i32, _endDrawId: i32): BigInt {
    let result = super.call(
      "getVaultPortion",
      "getVaultPortion(address,uint16,uint16):(int256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_startDrawId)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_endDrawId))
      ]
    );

    return result[0].toBigInt();
  }

  try_getVaultPortion(
    _vault: Address,
    _startDrawId: i32,
    _endDrawId: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultPortion",
      "getVaultPortion(address,uint16,uint16):(int256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_startDrawId)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_endDrawId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultUserBalanceAndTotalSupplyTwab(
    _vault: Address,
    _user: Address,
    _drawDuration: BigInt
  ): PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult {
    let result = super.call(
      "getVaultUserBalanceAndTotalSupplyTwab",
      "getVaultUserBalanceAndTotalSupplyTwab(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_drawDuration)
      ]
    );

    return new PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getVaultUserBalanceAndTotalSupplyTwab(
    _vault: Address,
    _user: Address,
    _drawDuration: BigInt
  ): ethereum.CallResult<
    PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult
  > {
    let result = super.tryCall(
      "getVaultUserBalanceAndTotalSupplyTwab",
      "getVaultUserBalanceAndTotalSupplyTwab(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_drawDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrizePool__getVaultUserBalanceAndTotalSupplyTwabResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getWinningRandomNumber(): BigInt {
    let result = super.call(
      "getWinningRandomNumber",
      "getWinningRandomNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getWinningRandomNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWinningRandomNumber",
      "getWinningRandomNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasOpenDrawFinished(): boolean {
    let result = super.call(
      "hasOpenDrawFinished",
      "hasOpenDrawFinished():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasOpenDrawFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasOpenDrawFinished",
      "hasOpenDrawFinished():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWinner(
    _vault: Address,
    _user: Address,
    _tier: i32,
    _prizeIndex: BigInt
  ): boolean {
    let result = super.call(
      "isWinner",
      "isWinner(address,address,uint8,uint32):(bool)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(_prizeIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_isWinner(
    _vault: Address,
    _user: Address,
    _tier: i32,
    _prizeIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWinner",
      "isWinner(address,address,uint8,uint32):(bool)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(_prizeIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  largestTierClaimed(): i32 {
    let result = super.call(
      "largestTierClaimed",
      "largestTierClaimed():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_largestTierClaimed(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "largestTierClaimed",
      "largestTierClaimed():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  lastClosedDrawAwardedAt(): BigInt {
    let result = super.call(
      "lastClosedDrawAwardedAt",
      "lastClosedDrawAwardedAt():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastClosedDrawAwardedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastClosedDrawAwardedAt",
      "lastClosedDrawAwardedAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastClosedDrawEndedAt(): BigInt {
    let result = super.call(
      "lastClosedDrawEndedAt",
      "lastClosedDrawEndedAt():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastClosedDrawEndedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastClosedDrawEndedAt",
      "lastClosedDrawEndedAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastClosedDrawStartedAt(): BigInt {
    let result = super.call(
      "lastClosedDrawStartedAt",
      "lastClosedDrawStartedAt():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastClosedDrawStartedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastClosedDrawStartedAt",
      "lastClosedDrawStartedAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextNumberOfTiers(): i32 {
    let result = super.call(
      "nextNumberOfTiers",
      "nextNumberOfTiers():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_nextNumberOfTiers(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "nextNumberOfTiers",
      "nextNumberOfTiers():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  numberOfTiers(): i32 {
    let result = super.call("numberOfTiers", "numberOfTiers():(uint8)", []);

    return result[0].toI32();
  }

  try_numberOfTiers(): ethereum.CallResult<i32> {
    let result = super.tryCall("numberOfTiers", "numberOfTiers():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  openDrawEndsAt(): BigInt {
    let result = super.call("openDrawEndsAt", "openDrawEndsAt():(uint64)", []);

    return result[0].toBigInt();
  }

  try_openDrawEndsAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openDrawEndsAt",
      "openDrawEndsAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openDrawStartedAt(): BigInt {
    let result = super.call(
      "openDrawStartedAt",
      "openDrawStartedAt():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_openDrawStartedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openDrawStartedAt",
      "openDrawStartedAt():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizeToken(): Address {
    let result = super.call("prizeToken", "prizeToken():(address)", []);

    return result[0].toAddress();
  }

  try_prizeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("prizeToken", "prizeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizeTokenPerShare(): BigInt {
    let result = super.call(
      "prizeTokenPerShare",
      "prizeTokenPerShare():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizeTokenPerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizeTokenPerShare",
      "prizeTokenPerShare():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserve(): BigInt {
    let result = super.call("reserve", "reserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserve", "reserve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveForOpenDraw(): BigInt {
    let result = super.call(
      "reserveForOpenDraw",
      "reserveForOpenDraw():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reserveForOpenDraw(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveForOpenDraw",
      "reserveForOpenDraw():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveShares(): i32 {
    let result = super.call("reserveShares", "reserveShares():(uint8)", []);

    return result[0].toI32();
  }

  try_reserveShares(): ethereum.CallResult<i32> {
    let result = super.tryCall("reserveShares", "reserveShares():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  smoothing(): BigInt {
    let result = super.call("smoothing", "smoothing():(int64)", []);

    return result[0].toBigInt();
  }

  try_smoothing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("smoothing", "smoothing():(int64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tierShares(): i32 {
    let result = super.call("tierShares", "tierShares():(uint8)", []);

    return result[0].toI32();
  }

  try_tierShares(): ethereum.CallResult<i32> {
    let result = super.tryCall("tierShares", "tierShares():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  totalWithdrawn(): BigInt {
    let result = super.call("totalWithdrawn", "totalWithdrawn():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWithdrawn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawn",
      "totalWithdrawn():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  twabController(): Address {
    let result = super.call("twabController", "twabController():(address)", []);

    return result[0].toAddress();
  }

  try_twabController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "twabController",
      "twabController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wasClaimed(
    _vault: Address,
    _winner: Address,
    _tier: i32,
    _prizeIndex: BigInt
  ): boolean {
    let result = super.call(
      "wasClaimed",
      "wasClaimed(address,address,uint8,uint32):(bool)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_winner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(_prizeIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_wasClaimed(
    _vault: Address,
    _winner: Address,
    _tier: i32,
    _prizeIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "wasClaimed",
      "wasClaimed(address,address,uint8,uint32):(bool)",
      [
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_winner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tier)),
        ethereum.Value.fromUnsignedBigInt(_prizeIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get params(): ConstructorCallParamsStruct {
    return changetype<ConstructorCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallParamsStruct extends ethereum.Tuple {
  get prizeToken(): Address {
    return this[0].toAddress();
  }

  get twabController(): Address {
    return this[1].toAddress();
  }

  get drawManager(): Address {
    return this[2].toAddress();
  }

  get drawPeriodSeconds(): BigInt {
    return this[3].toBigInt();
  }

  get firstDrawStartsAt(): BigInt {
    return this[4].toBigInt();
  }

  get numberOfTiers(): i32 {
    return this[5].toI32();
  }

  get tierShares(): i32 {
    return this[6].toI32();
  }

  get canaryShares(): i32 {
    return this[7].toI32();
  }

  get reserveShares(): i32 {
    return this[8].toI32();
  }

  get claimExpansionThreshold(): BigInt {
    return this[9].toBigInt();
  }

  get smoothing(): BigInt {
    return this[10].toBigInt();
  }
}

export class ClaimPrizeCall extends ethereum.Call {
  get inputs(): ClaimPrizeCall__Inputs {
    return new ClaimPrizeCall__Inputs(this);
  }

  get outputs(): ClaimPrizeCall__Outputs {
    return new ClaimPrizeCall__Outputs(this);
  }
}

export class ClaimPrizeCall__Inputs {
  _call: ClaimPrizeCall;

  constructor(call: ClaimPrizeCall) {
    this._call = call;
  }

  get _winner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tier(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _prizeIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _prizeRecipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ClaimPrizeCall__Outputs {
  _call: ClaimPrizeCall;

  constructor(call: ClaimPrizeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CloseDrawCall extends ethereum.Call {
  get inputs(): CloseDrawCall__Inputs {
    return new CloseDrawCall__Inputs(this);
  }

  get outputs(): CloseDrawCall__Outputs {
    return new CloseDrawCall__Outputs(this);
  }
}

export class CloseDrawCall__Inputs {
  _call: CloseDrawCall;

  constructor(call: CloseDrawCall) {
    this._call = call;
  }

  get winningRandomNumber_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseDrawCall__Outputs {
  _call: CloseDrawCall;

  constructor(call: CloseDrawCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class ContributePrizeTokensCall extends ethereum.Call {
  get inputs(): ContributePrizeTokensCall__Inputs {
    return new ContributePrizeTokensCall__Inputs(this);
  }

  get outputs(): ContributePrizeTokensCall__Outputs {
    return new ContributePrizeTokensCall__Outputs(this);
  }
}

export class ContributePrizeTokensCall__Inputs {
  _call: ContributePrizeTokensCall;

  constructor(call: ContributePrizeTokensCall) {
    this._call = call;
  }

  get _prizeVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ContributePrizeTokensCall__Outputs {
  _call: ContributePrizeTokensCall;

  constructor(call: ContributePrizeTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseReserveCall extends ethereum.Call {
  get inputs(): IncreaseReserveCall__Inputs {
    return new IncreaseReserveCall__Inputs(this);
  }

  get outputs(): IncreaseReserveCall__Outputs {
    return new IncreaseReserveCall__Outputs(this);
  }
}

export class IncreaseReserveCall__Inputs {
  _call: IncreaseReserveCall;

  constructor(call: IncreaseReserveCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreaseReserveCall__Outputs {
  _call: IncreaseReserveCall;

  constructor(call: IncreaseReserveCall) {
    this._call = call;
  }
}

export class SetDrawManagerCall extends ethereum.Call {
  get inputs(): SetDrawManagerCall__Inputs {
    return new SetDrawManagerCall__Inputs(this);
  }

  get outputs(): SetDrawManagerCall__Outputs {
    return new SetDrawManagerCall__Outputs(this);
  }
}

export class SetDrawManagerCall__Inputs {
  _call: SetDrawManagerCall;

  constructor(call: SetDrawManagerCall) {
    this._call = call;
  }

  get _drawManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDrawManagerCall__Outputs {
  _call: SetDrawManagerCall;

  constructor(call: SetDrawManagerCall) {
    this._call = call;
  }
}

export class WithdrawClaimRewardsCall extends ethereum.Call {
  get inputs(): WithdrawClaimRewardsCall__Inputs {
    return new WithdrawClaimRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawClaimRewardsCall__Outputs {
    return new WithdrawClaimRewardsCall__Outputs(this);
  }
}

export class WithdrawClaimRewardsCall__Inputs {
  _call: WithdrawClaimRewardsCall;

  constructor(call: WithdrawClaimRewardsCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawClaimRewardsCall__Outputs {
  _call: WithdrawClaimRewardsCall;

  constructor(call: WithdrawClaimRewardsCall) {
    this._call = call;
  }
}

export class WithdrawReserveCall extends ethereum.Call {
  get inputs(): WithdrawReserveCall__Inputs {
    return new WithdrawReserveCall__Inputs(this);
  }

  get outputs(): WithdrawReserveCall__Outputs {
    return new WithdrawReserveCall__Outputs(this);
  }
}

export class WithdrawReserveCall__Inputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawReserveCall__Outputs {
  _call: WithdrawReserveCall;

  constructor(call: WithdrawReserveCall) {
    this._call = call;
  }
}
